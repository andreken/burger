{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElem","elemType","a","createElement","Object","assign","className","classes","InputElem","elemConfig","value","onChange","changed","options","map","opt","key","name","Input","Label","label","Span","style","visibility","valid","module","exports","CheckoutSummary","ContactData","react_default","width","height","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","orders","token","auth","userId","dispatch","onOrderBurger","orderData","orderActions","withErrorHandler","_useState","useState","type","placeholder","validation","required","minLength","street","zipCode","maxLength","country","email","isEmail","deliveryMethod","_useState2","slicedToArray","orderForm","setOrderForm","_useState3","_useState4","formIsValid","setFormIsValid","formElementsArray","push","id","config","form","onSubmit","event","preventDefault","formData","order","formElement","e","inputId","orderFormElem","updateObject","target","checkValidity","orderFormUpd","defineProperty","inputIdx","inputChangedHandler","disable","Spinner","axios","purchased","summary","Redirect","to","Order_CheckoutSummary_CheckoutSummary","history","goBack","replace","Route","path","match","component"],"mappings":"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","file":"static/js/1.fc0ffead.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css'\r\n\r\nconst input = (props) => {\r\n\r\n\tlet inputElem = null;\r\n\tswitch(props.elemType){\r\n\t\tcase('input'):\r\n\t\t\tinputElem = <input className={classes.InputElem} \r\n\t\t\t\t{...props.elemConfig} value={props.value} \r\n\t\t\t\tonChange={props.changed}/>\r\n\t\t\tbreak;\r\n\t\tcase('textarea'):\r\n\t\t\tinputElem = <textarea className={classes.InputElem} \r\n\t\t\t\t{...props.elemConfig} value={props.value} \r\n\t\t\t\tonChange={props.changed}/>\r\n\t\t\tbreak;\r\n\t\tcase('select'):\r\n\t\t\tinputElem = <select className={classes.InputElem} \r\n\t\t\t\tvalue={props.value} \r\n\t\t\t\tonChange={props.changed}>\r\n\t\t\t\t\t{ props.elemConfig.options.map(opt => {\r\n\t\t\t\t\t\t\treturn <option key={opt.value} value={opt.value}>{opt.name}</option>\r\n\t\t\t\t\t\t}) }\r\n\t\t\t\t</select>\t\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tinputElem = <input className={classes.InputElem} \r\n\t\t\t\t{...props.elemConfig} value={props.value}\t/>\t\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className={classes.Input}>\r\n\t\t\t<label className={classes.Label}>{props.label}</label>\r\n\t\t\t{ inputElem }\r\n\t\t\t<span className={classes.Span} style={{ visibility: props.valid ? 'hidden' : 'visible' }} >\r\n\t\t\t\tPlease insert a valid value</span>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nexport default input","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1Au9r\",\"Label\":\"Input_Label__3xUx6\",\"InputElem\":\"Input_InputElem__QTjQ5\",\"Span\":\"Input_Span__2BogD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__21gth\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1u62s\"};","import React from 'react'\r\nimport classes from './CheckoutSummary.module.css'\r\n\r\nimport Burger from '../../Burger/Burger'\r\nimport Button from '../../UI/Button/Button'\r\n\r\nconst CheckoutSummary = (props) => {\r\n\treturn (\r\n\t\t<div className={classes.CheckoutSummary} >\r\n\t\t\t<h1>We hope it tastes well!</h1>\r\n\t\t\t<div style={{ width: '100%', height: '330px', margin: 'auto' }}>\r\n\t\t\t\t<Burger ingredients={props.ingredients} />\r\n\t\t\t</div>\r\n\t\t\t<Button \r\n\t\t\t\tbtnType=\"Danger\"\r\n\t\t\t\tclicked={props.checkoutCancelled}\r\n\t\t\t>CANCEL</Button>\r\n\t\t\t<Button \r\n\t\t\t\tbtnType=\"Success\"\r\n\t\t\t\tclicked={props.checkoutContinued}\r\n\t\t\t>CONTINUE</Button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CheckoutSummary;","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport classes from './ContactData.module.css'\r\n\r\nimport Button from '../../../components/UI/Button/Button'\r\nimport Spinner from '../../../components/UI/Spinner/Spinner'\r\nimport Input from '../../../components/UI/Input/Input'\r\nimport axios from '../../../axios-orders'\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as orderActions from '../../../store/actions/index'\r\nimport {updateObject,checkValidity} from '../../../shared/utility'\r\n\r\n// Converted from class to functional component with react hooks\r\nconst contactData = props => {\r\n\r\n\t// Split state, one for orderFrom and one for formIsValid\r\n\tconst [orderForm, setOrderForm] = useState({\r\n\t\t\tname: {\r\n\t\t\t\telemType: 'input',\r\n\t\t\t\telemConfig: {\r\n\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\tplaceholder: 'Your name'\r\n\t\t\t\t},\r\n\t\t\t\tvalidation: {\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tminLength: 3\r\n\t\t\t\t},\r\n\t\t\t\tvalid: false,\r\n\t\t\t\tvalue: ''\r\n\t\t\t},\r\n\t\t\tstreet: {\r\n\t\t\t\telemType: 'input',\r\n\t\t\t\telemConfig: {\r\n\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\tplaceholder: 'Street'\r\n\t\t\t\t},\r\n\t\t\t\tvalidation: {\r\n\t\t\t\t\trequired: true\r\n\t\t\t\t},\r\n\t\t\t\tvalid: false,\r\n\t\t\t\tvalue: ''\r\n\t\t\t},\r\n\t\t\tzipCode: {\r\n\t\t\t\telemType: 'input',\r\n\t\t\t\telemConfig: {\r\n\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\tplaceholder: 'Zip code'\r\n\t\t\t\t},\r\n\t\t\t\tvalidation: {\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tminLength: 5,\r\n\t\t\t\t\tmaxLength: 5\r\n\t\t\t\t},\r\n\t\t\t\tvalid: false,\r\n\t\t\t\tvalue: ''\r\n\t\t\t},\t\t\r\n\t\t\tcountry: {\r\n\t\t\t\telemType: 'input',\r\n\t\t\t\telemConfig: {\r\n\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\tplaceholder: 'Country'\r\n\t\t\t\t},\r\n\t\t\t\tvalidation: {\r\n\t\t\t\t\trequired: true\r\n\t\t\t\t},\r\n\t\t\t\tvalid: false,\r\n\t\t\t\tvalue: ''\r\n\t\t\t},\t\r\n\t\t\temail: {\r\n\t\t\t\telemType: 'input',\r\n\t\t\t\telemConfig: {\r\n\t\t\t\t\ttype: 'email',\r\n\t\t\t\t\tplaceholder: 'Your e-mail'\r\n\t\t\t\t},\r\n\t\t\t\tvalidation: {\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tisEmail: true\r\n\t\t\t\t},\r\n\t\t\t\tvalid: false,\r\n\t\t\t\tvalue: ''\r\n\t\t\t},\t\r\n\t\t\tdeliveryMethod: {\r\n\t\t\t\telemType: 'select',\r\n\t\t\t\telemConfig: {\r\n\t\t\t\t\toptions: [\r\n\t\t\t\t\t\t{value: 'F', name: 'Fastest'},\r\n\t\t\t\t\t\t{value: 'C', name: 'Cheapest'}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\tvalidation: {},\r\n\t\t\t\tvalid: true,\r\n\t\t\t\tvalue: 'F'\r\n\t\t\t}\r\n\t\t});\r\n\tconst [formIsValid, setFormIsValid] = useState(false);\r\n\r\n\r\n\tconst inputChangedHandler = (event, inputId) => {\r\n\t\t// Create a clone of the object that represent the form element changed\r\n\t\tconst orderFormElem = updateObject(orderForm[inputId], {\r\n\t\t\tvalue: event.target.value,\r\n\t\t\tvalid: checkValidity(event.target.value, orderForm[inputId].validation)\r\n\t\t})\r\n\t\tconst orderFormUpd = updateObject(orderForm, {\r\n\t\t\t[inputId]: orderFormElem\r\n\t\t})\r\n\t\t// Check form validity\r\n\t\tlet formIsValid = true;\r\n\t\tfor(let inputIdx in orderForm){\r\n\t\t\t// false must overrides true\r\n\t\t\tformIsValid = orderForm[inputIdx].valid && formIsValid\r\n\t\t}\r\n\t\t// this.setState({\r\n\t\t// \torderForm: orderForm,\r\n\t\t// \tformIsValid: formIsValid\r\n\t\t// })\r\n\t\tsetOrderForm(orderFormUpd);\r\n\t\tsetFormIsValid(formIsValid);\r\n\r\n\t}\r\n\r\n\tconst orderHandler = (event) => {\r\n\t\t// Prevent default behaviour,\r\n\t\t// that will be sending data and reload page\r\n\t\tevent.preventDefault();\r\n\t\t// Create an object containing name and value from orderForm\r\n\t\tconst formData = {}\r\n\t\tfor (let name in orderForm){\r\n\t\t\tformData[name] = orderForm[name].value\r\n\t\t}\r\n\t\t// Create the order object to save\r\n\t\tconst order = {\r\n\t\t\tingredients: props.ings,\r\n\t\t\tprice: props.price,\r\n\t\t\torderData: formData,\r\n\t\t\t// mapping order to the user\r\n\t\t\tuserId: props.userId\r\n\t\t}\r\n\r\n\t\tprops.onOrderBurger(order, props.token);\r\n\t\t// for firebase: any node name of your choise + .json\r\n\t\t// When saving on db is ended with success:\r\n\t\t// \tstop loading and return to the main page\t\r\n\t\t// Moved on action creator\r\n\t\t// axios.post('/orders.json', order)\r\n\t\t// \t.then(response => {\r\n\t\t// \t\tthis.setState({ loading: false });\r\n\t\t// \t\tthis.props.history.push('/');\r\n\t\t// \t})\r\n\t\t// \t.catch(error => {\r\n\t\t// \t\tthis.setState({ loading: false });\r\n\t\t// \t})\r\n\t}\r\n\r\n\r\n\t// Create an array of javascript objects\r\n\tconst formElementsArray = [];\r\n\tfor(let key in orderForm) {\r\n\t\tformElementsArray.push({\r\n\t\t\tid: key,\r\n\t\t\tconfig: orderForm[key]\r\n\t\t})\r\n\t}\r\n\t// Create all form elements passing attributes from state\r\n\tlet form = (\r\n\t\t<form onSubmit={orderHandler}>\r\n\t\t\t{ \r\n\t\t\t\tformElementsArray.map(formElement => {\r\n\t\t\t\t\treturn <Input\r\n\t\t\t\t\t\tkey={formElement.id}\r\n\t\t\t\t\t\telemType={formElement.config.elemType}\r\n\t\t\t\t\t\telemConfig={formElement.config.elemConfig}\r\n\t\t\t\t\t\tvalue={formElement.config.value}\r\n\t\t\t\t\t\tvalid={formElement.config.valid}\r\n\t\t\t\t\t\tchanged={(e) => inputChangedHandler(e,formElement.id)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\t<Button btnType=\"Success\" \r\n\t\t\t\tdisable={!formIsValid}>ORDER</Button>\r\n\t\t</form>\r\n\t)\r\n\tif(props.loading) {\r\n\t\tform = <Spinner />\r\n\t}\r\n\treturn (\r\n\t\t<div className={classes.ContactData}>\r\n\t\t\t<h4>Enter your contact data</h4>\r\n\t\t\t{ form }\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tings: state.burgerBuilder.ingredients,\r\n\t\tprice: state.burgerBuilder.totalPrice,\r\n\t\tloading: state.orders.loading,\r\n\t\ttoken: state.auth.token,\r\n\t\tuserId: state.auth.userId\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonOrderBurger: (orderData, token) => dispatch(orderActions.purchaseBurger(orderData, token))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(contactData, axios));","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary'\r\nimport ContactData from './ContactData/ContactData'\r\n\r\n// Converted from class to functional component with react hooks\r\nconst checkout = props => {\r\n\r\n\t// state = {\r\n\t// \tingredients: null\r\n\t// }\r\n\r\n\t// Evaluate state in willMount because i need ingredients\r\n\t// before the component is rendered\r\n\t// because are passed to CheckoutSummary component\r\n\t// Load ingredients using query param\r\n\t// Using '+' on price and value to convert into a number\r\n\t// componentWillMount() {\r\n\t\t// No more needed, added redux to manage state\r\n\t\t// const query = new URLSearchParams(this.props.location.search);\r\n\t\t// const ingredients = {};\r\n\t\t// let price, value;\r\n\t\t// for(let param of query.entries()) {\r\n\t\t// \t[value,price] = param[1].split('#')\r\n\t\t// \tingredients[param[0]] = {price: +price, value: +value}\r\n\t\t// }\r\n\t\t// this.setState({\r\n\t\t// \tingredients: ingredients\r\n\t\t// })\r\n\t// }\r\n\r\n\tconst checkoutCancelledHandler = () => {\r\n\t\tprops.history.goBack();\r\n\t}\r\n\r\n\t// Using replace instead of push\r\n\t// so that when going back from /checkout/contact-data\r\n\t// i will return on main page instead of /checkout\r\n\tconst checkoutContinuedHandler = () => {\r\n\t\tprops.history.replace('/checkout/contact-data')\r\n\t}\r\n\r\n\r\n\t// if no ingredients are added, return to the main page\r\n\tlet summary = <Redirect to =\"/\" />\r\n\tif(props.ings){\r\n\t\tsummary = (\r\n\t\t\t<CheckoutSummary \r\n\t\t\t\tingredients={props.ings} \r\n\t\t\t\tcheckoutCancelled={checkoutCancelledHandler}\r\n\t\t\t\tcheckoutContinued={checkoutContinuedHandler}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{ summary }\r\n\t\t{ /* If order completed i leave the page */ }\r\n\t\t\t{ props.purchased ? <Redirect to =\"/\" /> : null }\r\n\t\t{/* Here i want to pass ingredients to the ContactData \r\n\t\t\t\tTo do so, i pass it in render with props\r\n\t\t\t\tinstead of using component keywork \r\n\t\t\t\tI also pass all props received by Checkout\r\n\t\t\t\tto have access to the history prop into ContactData */}\r\n\t\t\t<Route \r\n\t\t\t\tpath={props.match.path + '/contact-data'} \r\n\t\t\t\tcomponent={ContactData}\r\n\t\t\t\t// No more needed, added redux to manage state\r\n\t\t\t\t// render={(props) => ( <ContactData ingredients={this.props.ingredients} {...props} /> )}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tings: state.burgerBuilder.ingredients,\r\n\t\tpurchased: state.orders.purchased\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps)(checkout);"],"sourceRoot":""}