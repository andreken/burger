{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","order","props","ingredients","ingredientName","push","Object","objectSpread","name","ingredientsOutput","map","ig","react_default","a","createElement","key","value","className","classes","price","toFixed","connect","state","orders","loading","token","auth","userId","dispatch","onFetchOrders","actions","withErrorHandler","useEffect","Spinner","id","axios"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,MAAA,qHCyBHC,EAtBD,SAACC,GAEd,IAAMC,EAAc,GACpB,IAAI,IAAIC,KAAkBF,EAAMC,YAC/BA,EAAYE,KAAZC,OAAAC,EAAA,EAAAD,CAAA,GACIJ,EAAMC,YAAYC,GADtB,CAECI,KAAMJ,KAIR,IAAMK,EAAoBN,EAAYO,IAAI,SAAAC,GACzC,OAAOC,EAAAC,EAAAC,cAAA,QAAMC,IAAKJ,EAAGH,MAAOG,EAAGH,KAAxB,KAAgCG,EAAGK,MAAnC,OAGR,OACCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAWC,IAAQlB,OACvBY,EAAAC,EAAAC,cAAA,2BAAmBL,GACnBG,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,qBAAaZ,EAAMiB,MAAMC,QAAQ,sCC2D/BC,sBAfS,SAAAC,GACvB,MAAO,CACNC,OAAQD,EAAMC,OAAOA,OACrBC,QAASF,EAAMC,OAAOC,QACtBC,MAAOH,EAAMI,KAAKD,MAClBE,OAAQL,EAAMI,KAAKC,SAIM,SAAAC,GAC1B,MAAO,CACNC,cAAe,SAACJ,EAAOE,GAAR,OAAmBC,EAASE,IAAoBL,EAAOE,OAIzDN,CAA6CU,YAtE7C,SAAA7B,GAiCd8B,oBAAU,WACT9B,EAAM2B,cAAc3B,EAAMuB,MAAOvB,EAAMyB,SACrC,IAEH,IAAIJ,EAASX,EAAAC,EAAAC,cAACmB,EAAA,EAAD,MAWb,OAVI/B,EAAMsB,UACTD,EACCrB,EAAMqB,OAAOb,IAAI,SAAAT,GAChB,OAAOW,EAAAC,EAAAC,cAACd,EAAD,CACNe,IAAKd,EAAMiC,GACX/B,YAAaF,EAAME,YACnBgB,MAAOlB,EAAMkB,WAKhBP,EAAAC,EAAAC,cAAA,WACGS,IAoB+EY","file":"static/js/2.c8d19725.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__3lYvN\"};","import React from 'react'\r\n\r\nimport classes from './Order.module.css'\r\n\r\nconst order = (props) => {\r\n\t// Transform ingredients obj into an array\r\n\tconst ingredients = [];\r\n\tfor(let ingredientName in props.ingredients){\r\n\t\tingredients.push({\r\n\t\t\t...props.ingredients[ingredientName],\r\n\t\t\tname: ingredientName \r\n\t\t})\r\n\t}\r\n\t// Return a list of ingredients with name and amount\r\n\tconst ingredientsOutput = ingredients.map(ig => {\r\n\t\treturn <span key={ig.name}>{ig.name} ({ig.value})</span>\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div className={classes.Order}>\r\n\t\t\t<div>Ingredients: {ingredientsOutput}</div>\r\n\t\t\t<p>Price: <strong>USD {props.price.toFixed(2)}</strong></p>\t\t\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default order;","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios-orders';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler'\r\nimport * as actions from '../../store/actions/index'\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\n\r\n// Converted from class to functional component with react hooks\r\nconst orders = props => {\r\n\r\n\t// state = {\r\n\t// \torders: [],\r\n\t// \tloading: true\r\n\t// }\r\n\r\n\t// I only want to fetch orders when this is loaded\r\n\t// componentDidMount() {\r\n\t// \t// axios.get('/orders.json')\r\n\t// \t// \t.then(res => {\r\n\t// \t// \t\t// Turns order obj into an array\r\n\t// \t// \t\t// distribute values to add id\r\n\t// \t// \t\tconst arrayOrders = [];\r\n\t// \t// \t\tfor(let key in res.data){\r\n\t// \t// \t\t\tarrayOrders.push({ \r\n\t// \t// \t\t\t\t...res.data[key],\r\n\t// \t// \t\t\t\tid: key\r\n\t// \t// \t\t\t});\r\n\t// \t// \t\t}\r\n\t// \t// \t\tthis.setState({ \r\n\t// \t// \t\t\tloading: false,\r\n\t// \t// \t\t\torders: arrayOrders \r\n\t// \t// \t\t})\r\n\t// \t// \t})\r\n\t// \t// \t.catch(e => {\r\n\t// \t// \t\tthis.setState({ loading: false })\r\n\t// \t// \t})\r\n\t// \t// I want to see only orders of the logged user\r\n\t// \tthis.props.onFetchOrders(this.props.token, this.props.userId);\r\n\t// }\r\n\r\n\t// useEffect onmount\r\n\tuseEffect(() => {\r\n\t\tprops.onFetchOrders(props.token, props.userId);\r\n\t}, [])\r\n\r\n\tlet orders = <Spinner />;\r\n\tif(!props.loading){\r\n\t\torders = (\r\n\t\t\tprops.orders.map(order => {\r\n\t\t\t\treturn <Order \r\n\t\t\t\t\tkey={order.id}\r\n\t\t\t\t\tingredients={order.ingredients} \r\n\t\t\t\t\tprice={order.price} />\r\n\t\t\t})\r\n\t\t)\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{ orders }\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\torders: state.orders.orders,\r\n\t\tloading: state.orders.loading,\r\n\t\ttoken: state.auth.token,\r\n\t\tuserId: state.auth.userId\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(orders,axios));"],"sourceRoot":""}